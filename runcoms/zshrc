#
# Executes commands at the start of an interactive session.
#
# Authors:
#   Sorin Ionescu <sorin.ionescu@gmail.com>
#

# Source Prezto.
if [[ -s "${ZDOTDIR:-$HOME}/.zprezto/init.zsh" ]]; then
  source "${ZDOTDIR:-$HOME}/.zprezto/init.zsh"
fi

# To customize prompt, run `p10k configure` or edit ~/.zprezto/.p10k.zsh.
[[ ! -f ~/.zprezto/.p10k.zsh ]] || source ~/.zprezto/.p10k.zsh

# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

#  ---------------------------------------------------------------------------
#
#  Description:  This file holds all my BASH configurations and aliases
#
#  Sections:
#  1.   Environment Configuration
#  2.   Make Terminal Better (remapping defaults and adding functionality)
#  3.   Networking
#  4.   Audio, mpv and youtube-dl
#  5.   Web Development
#  6.   File and folder management
#
#  ---------------------------------------------------------------------------

#   -------------------------------
#   1.  ENVIRONMENT CONFIGURATION
#   -------------------------------


#   Set Paths
#   ------------------------------------------------------------
export PATH="~/.composer/vendor/bin:$PATH"

#   Set Default Editor (change 'Nano' to the editor of your choice)
#   ------------------------------------------------------------
export EDITOR=/usr/bin/nano

#   Set default blocksize for ls, df, du
#   from this: http://hints.macworld.com/comment.php?mode=view&cid=24491
#   ------------------------------------------------------------
export BLOCKSIZE=1k


#   -----------------------------
#   2.  MAKE TERMINAL BETTER
#   -----------------------------

alias cp='cp -iv'                           # Preferred 'cp' implementation
alias mv='mv -iv'                           # Preferred 'mv' implementation
alias mkdir='mkdir -pv'                     # Preferred 'mkdir' implementation
alias ll='ls -lFah'                         # Preferred 'ls' implementation
alias less='less -FSRXc'                    # Preferred 'less' implementation
function cd() { builtin cd "$@"; ll; }      # Always list directory contents upon 'cd'
alias largest='ll -- **/*(.DOL[1,10])'      # List the 10 largest regular files recursively.
alias dirsize='du -cksh * | sort -hr'       # List files and folders, sorted by their size.
function duls () {                          # List all the directory sizes, and append the results from 'll' command. Usage 'duls *'
    paste <( du -hs -- "$@" | cut -f1 ) <( ls -ldFGAhp -- "$@" )
}
alias cd..='cd ../'                         # Go back 1 directory level (for fast typers)
alias ..='cd ../'                           # Go back 1 directory level
alias ...='cd ../../'                       # Go back 2 directory levels
alias .3='cd ../../../'                     # Go back 3 directory levels
alias .4='cd ../../../../'                  # Go back 4 directory levels
alias .5='cd ../../../../../'               # Go back 5 directory levels
alias .6='cd ../../../../../../'            # Go back 6 directory levels
alias edit='subl'                           # edit:         Opens any file in sublime editor
alias f='open -a Finder ./'                 # f:            Opens current directory in MacOS Finder
alias ~="cd ~"                              # ~:            Go Home
alias c='clear'                             # c:            Clear terminal display
alias which='type -a'                       # which:        Find executables
alias path='echo -e ${PATH//:/\\n}'         # path:         Echo all executable Paths
alias show_options='shopt'                  # Show_options: display bash options settings
alias fix_stty='stty sane'                  # fix_stty:     Restore terminal settings when screwed up
alias cic='set completion-ignore-case On'   # cic:          Make tab-completion case-insensitive
function mcd () { mkdir -p "$1" && cd "$1"; }        # mcd:          Makes new Dir and jumps inside
function trash () { command mv "$@" ~/.Trash ; }     # trash:        Moves a file to the MacOS trash
function ql () { qlmanage -p "$*" >& /dev/null; }    # ql:           Opens any file in MacOS Quicklook Preview
alias DT='tee ~/Desktop/terminalOut.txt'    # DT:           Pipe content to file on MacOS Desktop

#   lr:  Full Recursive Directory Listing
#   ------------------------------------------
alias lr='ls -R | grep ":$" | sed -e '\''s/:$//'\'' -e '\''s/[^-][^\/]*\//--/g'\'' -e '\''s/^/   /'\'' -e '\''s/-/|/'\'' | less'

#   mans:   Search manpage given in agument '1' for term given in argument '2' (case insensitive)
#           displays paginated result with colored search terms and two lines surrounding each hit.             Example: mans mplayer codec
#   --------------------------------------------------------------------
function mans () {
    man $1 | grep -iC2 --color=always $2 | less
}

#   showa: to remind yourself of an alias (given some part of it)
#   ------------------------------------------------------------
function showa () { /usr/bin/grep --color=always -i -a1 $@ ~/.zprezto/runcoms/zshrc | grep -v '^\s*$' | less -FSRXc ; }

# apt-get update shortcut
function sysupgrade() {
    if is-darwin; then
        # mas reset # prevent reinstalling updates
        # mas upgrade
        brew upgrade
        brew cu
        brew cleanup
        which composer > /dev/null 2>&1 && [[ -f "$HOME/.composer/composer.json" ]] && composer global update
        zprezto-update

    elif is-linux; then
        sudo apt update
        sudo apt -V full-upgrade
        sudo apt autoremove
        which composer > /dev/null 2>&1 && [[ -f "$HOME/.composer/composer.json" ]] && composer global update
        zprezto-update

    else
        echo 'This Opreating system is not supported.'
    fi
}
alias fix_homebrew='brew doctor && sudo chown -R $(whoami):admin $(brew --prefix)/Cellar/*'


#   -----------------------------
#   3.  NETWORK TOOLS
#   -----------------------------

# Print the current public IP address
alias myip='dig +short myip.opendns.com @resolver1.opendns.com'
# List other devices on the local network
alias arpscan='sudo arp-scan --localnet --bandwidth=4096000'
# Flush the DNS cache. Useful for local issues, and over the Internet
alias flushdns='sudo killall -HUP mDNSResponder;sudo killall mDNSResponderHelper;sudo dscacheutil -flushcache'
# List all DNS records for a domain. E.g. : digall google.com @1.1.1.1
alias digall='dig -t ANY'
# DNS Benchmark, add your system DNS : `dnsbench 10.0.0.1`
alias dnsbench='namebench --query=1000 --timeout=1 --benchmark_threads=100 --input=alexa --open_webbrowser --only 1.1.1.1 8.8.8.8 149.112.121.10 '

# Prettyping
if (( $+commands[prettyping] )); then
  alias ping='prettyping --nolegend'
fi
function ispeed() {
    speedtest -s 911 # Fibrenoire
}
function ispeed-fast() {
    speedtest -s 911 # Fibrenoire
    speedtest -s 17567 # Bell Laval
    speedtest -s 6835 # TelKel Laval
    speedtest -s 16754 # Bell Mobility Montreal
    speedtest -s 24707 # Telus Mobility Montreal
    speedtest -s 48287 # Cloudflare Toronto
}

# https://speedtest-server-list.herokuapp.com
function ispeed-far() {
    speedtest -s 48286 # Cloudflare Vancouver, BC
    speedtest -s 44935 # Cloudflare Newark, NJ (New York)
    speedtest -s 48297 # Cloudflare Atlanta, GA
    speedtest -s 44932 # Cloudflare San Jose, CA (The Bay Area)
    speedtest -s 48302 # Cloudflare SÃ£o Paulo, Brazil
    speedtest -s 48276 # Cloudflare Santiago, Chile
    speedtest -s 48301 # Cloudflare Tokyo, Japan
    speedtest -s 48299 # Cloudflare Hong Kong
    speedtest -s 48306 # Cloudflare Singapore
    speedtest -s 48293 # Cloudflare Sydney, Australia
    speedtest -s 48298 # Cloudflare Mumbai, India
    speedtest -s 48283 # Cloudflare Johannesburg, South Africa
    speedtest -s 48303 # Cloudflare Paris, France
    speedtest -s 48277 # Cloudflare Zurich, Switzerland
    speedtest -s 48304 # Cloudflare Frankfurt, Germany
    speedtest -s 48281 # Cloudflare Stockholm, Sweden
}


#   -----------------------------
#   4.  AUDIO, MPV AND YOUTUBE-DL
#   -----------------------------

# Spotifyd
alias spoticli='spotifyd --no-daemon'

# Override youtube-dl
alias youtube-dl='yt-dlp'

# MPV aliases
alias yt-formats='youtube-dl --list-formats' # Prints all available formats

alias yt-best-m4a='yt-dlp -f "bestaudio[ext=m4a]"'
alias yt-best-mp4='yt-dlp -f "bestvideo[ext=mp4]+bestaudio[ext=m4a]/best[ext=mp4]"'

#   Play an audio-only Youtube radio Live Stream
#   Youtube LiveStreams are usually MP4+AAC files streamed using the HLS protocol. Since there is only one format, it's easy to compare quality.
#   They're often available in 480p@128k, 720p@256k or 1080p@256k. Let's use the 720p, since the video is discarded.
#   Note : --ytdl-raw-options : Options without argument must include =.
#
function rlive-dry() { yt-formats "$1" && youtube-dl --get-format -f "bestaudio/best[height<1080]/best" "$1"; }
alias rlive='mpv --no-video --volume=100 --cache-secs=60 --ytdl-format="bestaudio/best[height<1080]/best" --force-seekable=yes'

#   Play an audio-only Youtube pre-recorded set
#   Regular videos usually have MPEG-DASH or Opus audio-only files, so we try to use those first.
#
function rrec-dry() { yt-formats "$1" && youtube-dl --get-format -f "bestaudio/best" "$1"; }
alias rrec='mpv --no-video --volume=100 --cache-secs=60 --ytdl-format="bestaudio/best" --ytdl-raw-options=no-cache-dir=,playlist-random='

# Stream Nanit camera from the Homebridge proxy
alias nanit='iina rtmp://10.2.0.20:1935/local/b2cc5d12 --mpv-mute=yes --mpv-cache-secs=1'


#   -----------------------------
#   5.  WEB DEVELOPMENT
#   -----------------------------

# PHP
alias php@7.4='/usr/local/opt/php@7.4/bin/php'
alias php@8.0='/usr/local/opt/php@8.0/bin/php'
export PHP_CS_FIXER_IGNORE_ENV=true

# Composer
alias ci='composer install'
alias cu='composer update'
alias co='composer outdated --direct'
alias cl='composer show -t' # Show installed packages and dependency tree
alias cgu='composer global update'
alias cgo='composer global outdated'

# Laravel
alias art='php artisan'
alias artenc='LARAVEL_ENV_ENCRYPTION_KEY="op://Secrets/Laravel Secrets Encryption Key/password" op run -- php artisan env:encrypt'
alias artdec='LARAVEL_ENV_ENCRYPTION_KEY="op://Secrets/Laravel Secrets Encryption Key/password" op run -- php artisan env:decrypt'
alias vart='valet php artisan'
alias sail='vendor/bin/sail'
alias migrate='php artisan migrate'
alias fresh='php artisan migrate:fresh --seed'

# Node.js
alias yu="yarn upgrade"

# Combinations and other aliases
alias cyu="cu && yu"

# Git
alias git-cleanup-dry="git branch --merged | grep -v '\*\|master\|main\|live\|develop'"
alias git-cleanup="git branch --merged | grep -v '\*\|master\|main\|live\|develop' | xargs -n 1 -r git branch -d"


#   -------------------------------
#   6.  FILE AND FOLDER MANAGEMENT
#   -------------------------------

function zipf () { zip -r "$1".zip "$1" ; }          # zipf:         To create a ZIP archive of a folder
function xzf () { tar -cJf "$1".tar.xz "$1" ; }      # xzf:          To create a tar.xz archive of a folder
alias numFiles='echo $(ls -1 | wc -l)'      # numFiles:     Count of non-hidden files in current dir
alias make1mb='mkfile 1m ./1MB.dat'         # make1mb:      Creates a file of 1mb size (all zeros)
alias make5mb='mkfile 5m ./5MB.dat'         # make5mb:      Creates a file of 5mb size (all zeros)
alias make10mb='mkfile 10m ./10MB.dat'      # make10mb:     Creates a file of 10mb size (all zeros)


#   extract:  Extract most know archives with one command
#   ---------------------------------------------------------
function extract () {
    if [ -f $1 ] ; then
      case $1 in
        *.tar.bz2)   tar xjf $1     ;;
        *.tar.gz)    tar xzf $1     ;;
        *.tar.xz)    tar xJf $1     ;;
        *.bz2)       bunzip2 $1     ;;
        *.rar)       unrar e $1     ;;
        *.gz)        gunzip $1      ;;
        *.tar)       tar xf $1      ;;
        *.tbz2)      tar xjf $1     ;;
        *.tgz)       tar xzf $1     ;;
        *.zip)       unzip $1       ;;
        *.Z)         uncompress $1  ;;
        *.7z)        7z x $1        ;;
        *)     echo "'$1' cannot be extracted via extract()" ;;
         esac
     else
         echo "'$1' is not a valid file"
     fi
}

# The next line updates PATH for the Google Cloud SDK.
if [ -f '/usr/local/google-cloud-sdk/path.zsh.inc' ]; then source '/usr/local/google-cloud-sdk/path.zsh.inc'; fi

# The next line enables shell command completion for gcloud.
if [ -f '/usr/local/google-cloud-sdk/completion.zsh.inc' ]; then source '/usr/local/google-cloud-sdk/completion.zsh.inc'; fi

# Enable shell completion for 1Password
eval "$(op completion zsh)"; compdef _op op

# Source ASDF
if [ -f '/usr/local/opt/asdf/libexec/asdf.sh' ]; then . /usr/local/opt/asdf/libexec/asdf.sh; fi;
